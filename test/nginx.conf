worker_processes  8;

events {
    worker_connections  4096;
}

http {
access_log /dev/stdout;
error_log /dev/stderr debug;

upstream tnt_backend {
    server 127.0.0.1:3301 max_fails=5 fail_timeout=60s;
    keepalive 32;
}

server {
    listen       127.0.0.1:12345;
    server_name  localhost;

    location /tnt_proxy {
        internal;
        tnt_method "nginx_entrypoint";
        tnt_http_methods all;
        tnt_buffer_size 100k;
        tnt_pass_http_request on pass_body; # parse_args;
        tnt_pass tnt_backend;
    }

    location / {
        rewrite_by_lua '
            local cjson = require("cjson")
            local map = {
              GET = ngx.HTTP_GET,
              POST = ngx.HTTP_POST,
              PUT = ngx.HTTP_PUT,
              PATCH = ngx.HTTP_PATCH,
              DELETE = ngx.HTTP_DELETE,
            }

            -- hide `{"params": [...]}` from a user

            ngx.req.read_body()
            local body = ngx.req.get_body_data()

            -- cjson.encode is needed to json-escape the body
            if body then
                body = "{\\"params\\": " .. cjson.encode(body) .. "}"
            end

            local res = ngx.location.capture("/tnt_proxy", {
              args = ngx.var.args,
              method = map[ngx.var.request_method],
              body = body
            })
            if res.status == ngx.HTTP_OK then
              local answ = cjson.decode(res.body)
              -- Read reply
              local result = answ["result"]
              if result ~= nil then
                ngx.status = result[1]
                for k, v in pairs(result[2]) do
                  ngx.header[k] = v
                end
                ngx.print(result[3])
              else
                ngx.status = 502
                ngx.say("Tarantool does not work")
              end
              -- Finalize execution
              ngx.exit(ngx.OK)
            else
              ngx.status = res.status
              ngx.say(res.body)
            end
            ';
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}

}
